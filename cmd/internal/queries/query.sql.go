// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRecital = `-- name: CreateRecital :one
INSERT INTO recitals (url, title, description, status, path, created_at)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, url, title, description, status, path, created_at
`

type CreateRecitalParams struct {
	Url         string
	Title       string
	Description string
	Status      string
	Path        string
	CreatedAt   pgtype.Date
}

func (q *Queries) CreateRecital(ctx context.Context, arg CreateRecitalParams) (Recital, error) {
	row := q.db.QueryRow(ctx, createRecital,
		arg.Url,
		arg.Title,
		arg.Description,
		arg.Status,
		arg.Path,
		arg.CreatedAt,
	)
	var i Recital
	err := row.Scan(
		&i.ID,
		&i.Url,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.Path,
		&i.CreatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, password_hash, created_at)
VALUES ($1, $2, $3)
RETURNING id, email, password_hash, created_at
`

type CreateUserParams struct {
	Email        string
	PasswordHash string
	CreatedAt    pgtype.Date
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Email, arg.PasswordHash, arg.CreatedAt)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
	)
	return i, err
}

const deleteRecital = `-- name: DeleteRecital :exec
DELETE FROM recitals WHERE id = $1
RETURNING id, url, title, description, status, path, created_at
`

func (q *Queries) DeleteRecital(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteRecital, id)
	return err
}

const getRecital = `-- name: GetRecital :one
SELECT id, url, title, description, status, path, created_at FROM recitals WHERE id = $1
`

func (q *Queries) GetRecital(ctx context.Context, id int32) (Recital, error) {
	row := q.db.QueryRow(ctx, getRecital, id)
	var i Recital
	err := row.Scan(
		&i.ID,
		&i.Url,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.Path,
		&i.CreatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, email, password_hash, created_at FROM users WHERE email = $1
`

func (q *Queries) GetUser(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUser, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
	)
	return i, err
}

const listRecitals = `-- name: ListRecitals :many
SELECT id, url, title, description, status, path, created_at FROM recitals
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListRecitalsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListRecitals(ctx context.Context, arg ListRecitalsParams) ([]Recital, error) {
	rows, err := q.db.Query(ctx, listRecitals, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Recital
	for rows.Next() {
		var i Recital
		if err := rows.Scan(
			&i.ID,
			&i.Url,
			&i.Title,
			&i.Description,
			&i.Status,
			&i.Path,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRecitalPath = `-- name: UpdateRecitalPath :exec
UPDATE recitals SET path = $2 WHERE id = $1
RETURNING id, url, title, description, status, path, created_at
`

type UpdateRecitalPathParams struct {
	ID   int32
	Path string
}

func (q *Queries) UpdateRecitalPath(ctx context.Context, arg UpdateRecitalPathParams) error {
	_, err := q.db.Exec(ctx, updateRecitalPath, arg.ID, arg.Path)
	return err
}

const updateRecitalStatus = `-- name: UpdateRecitalStatus :exec
UPDATE recitals SET status = $2 WHERE id = $1
RETURNING id, url, title, description, status, path, created_at
`

type UpdateRecitalStatusParams struct {
	ID     int32
	Status string
}

func (q *Queries) UpdateRecitalStatus(ctx context.Context, arg UpdateRecitalStatusParams) error {
	_, err := q.db.Exec(ctx, updateRecitalStatus, arg.ID, arg.Status)
	return err
}
